---
// Saved content page for displaying user's bookmarked items
import Base from '../layouts/Base.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.jsx';
import NewsletterSignup from '../components/NewsletterSignup.astro';
---

<Base 
  title="Saved for Later | Your Analytics Reading List"
  description="Your personal collection of saved analytics insights, tools, and resources. Never lose track of valuable content again."
>
  <Navbar />
  
  <main class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-16">
    <div class="container mx-auto px-4">
      
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-6xl font-black text-gray-800 mb-4">
          <span class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Your Reading List
          </span> üìö
        </h1>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto">
          All your saved analytics insights, tools, and resources in one place. 
          Because good content deserves to be remembered!
        </p>
      </div>

      <!-- Saved Items Container -->
      <div class="max-w-4xl mx-auto">
        
        <!-- Empty State -->
        <div id="empty-state" class="text-center py-20">
          <div class="w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"/>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-700 mb-4">No saved content yet</h2>
          <p class="text-gray-600 mb-8 max-w-md mx-auto">
            Start exploring our content and click the bookmark icon on any article, tool, or resource to save it here.
          </p>
          <div class="flex flex-wrap gap-4 justify-center">
            <a href="/blog" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
              Browse Blog Posts
            </a>
            <a href="/tools" class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
              Explore Tools
            </a>
            <a href="/downloads" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
              View Resources
            </a>
          </div>
        </div>

        <!-- Saved Items List -->
        <div id="saved-items" class="hidden">
          <!-- Filter/Sort Controls -->
          <div class="flex flex-wrap gap-4 items-center justify-between mb-8 p-4 bg-white rounded-lg shadow-sm">
            <div class="flex flex-wrap gap-2 items-center">
              <span class="text-sm font-medium text-gray-600">Filter by:</span>
              <button class="filter-btn active" data-type="all">All</button>
              <button class="filter-btn" data-type="article">Articles</button>
              <button class="filter-btn" data-type="tool">Tools</button>
              <button class="filter-btn" data-type="resource">Resources</button>
            </div>
            <div class="flex gap-2 items-center">
              <span class="text-sm font-medium text-gray-600">Sort:</span>
              <select id="sort-select" class="border border-gray-300 rounded px-3 py-1 text-sm">
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="title">Alphabetical</option>
              </select>
            </div>
          </div>

          <!-- Items Grid -->
          <div id="items-grid" class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            <!-- Items will be inserted here by JavaScript -->
          </div>

          <!-- Stats -->
          <div class="mt-12 text-center">
            <p class="text-gray-600">
              <span id="item-count">0</span> items saved ‚Ä¢ 
              <span id="total-reading-time">0 min</span> estimated reading time
            </p>
          </div>
        </div>

      </div>

      <!-- Newsletter Section -->
      <div class="max-w-2xl mx-auto mt-20">
        <NewsletterSignup 
          title="Don't Miss New Content! üî•"
          description="Get notified when we publish new analytics insights, tools, and resources worth saving."
          leadMagnet="Free: Analytics Starter Pack + 5 Essential Templates"
          variant="inline"
        />
      </div>
      
    </div>
  </main>

  <Footer />
</Base>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const STORAGE_KEY = 'trailblazer_saved_content';
    
    // DOM elements
    const emptyState = document.getElementById('empty-state');
    const savedItems = document.getElementById('saved-items');
    const itemsGrid = document.getElementById('items-grid');
    const itemCount = document.getElementById('item-count');
    const totalReadingTime = document.getElementById('total-reading-time');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const sortSelect = document.getElementById('sort-select');
    
    let currentFilter = 'all';
    let currentSort = 'newest';
    let allItems = [];
    
    // Load saved items
    function loadSavedItems() {
      try {
        const saved = localStorage.getItem(STORAGE_KEY);
        return saved ? JSON.parse(saved) : [];
      } catch (error) {
        console.error('Error loading saved items:', error);
        return [];
      }
    }
    
    // Save items back to storage
    function saveItems(items) {
      try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(items));
      } catch (error) {
        console.error('Error saving items:', error);
      }
    }
    
    // Remove item from saved list
    function removeItem(id) {
      allItems = allItems.filter(item => item.id !== id);
      saveItems(allItems);
      renderItems();
    }
    
    // Filter items by type
    function filterItems(items, type) {
      if (type === 'all') return items;
      return items.filter(item => item.type === type);
    }
    
    // Sort items
    function sortItems(items, sortBy) {
      const sorted = [...items];
      switch (sortBy) {
        case 'newest':
          return sorted.sort((a, b) => new Date(b.savedAt) - new Date(a.savedAt));
        case 'oldest':
          return sorted.sort((a, b) => new Date(a.savedAt) - new Date(b.savedAt));
        case 'title':
          return sorted.sort((a, b) => a.title.localeCompare(b.title));
        default:
          return sorted;
      }
    }
    
    // Create item card HTML
    function createItemCard(item) {
      const savedDate = new Date(item.savedAt).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
      
      const typeColors = {
        article: 'bg-blue-100 text-blue-800',
        tool: 'bg-green-100 text-green-800',
        resource: 'bg-purple-100 text-purple-800'
      };
      
      const typeIcons = {
        article: 'üìù',
        tool: 'üõ†Ô∏è',
        resource: 'üìä'
      };
      
      return `
        <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow border border-gray-200">
          <div class="p-6">
            <!-- Header -->
            <div class="flex items-start justify-between mb-4">
              <span class="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${typeColors[item.type] || 'bg-gray-100 text-gray-800'}">
                ${typeIcons[item.type] || 'üìÑ'} ${item.type}
              </span>
              <button 
                class="remove-item-btn text-gray-400 hover:text-red-500 transition-colors"
                data-id="${item.id}"
                title="Remove from saved"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
            
            <!-- Content -->
            <h3 class="font-bold text-lg text-gray-900 mb-2 line-clamp-2">
              <a href="${item.url}" class="hover:text-blue-600 transition-colors">
                ${item.title}
              </a>
            </h3>
            
            <!-- Meta -->
            <div class="flex items-center justify-between text-sm text-gray-500">
              <span>Saved ${savedDate}</span>
              <a 
                href="${item.url}" 
                class="text-blue-600 hover:text-blue-700 font-medium"
              >
                Read ‚Üí
              </a>
            </div>
          </div>
        </div>
      `;
    }
    
    // Render items
    function renderItems() {
      if (!itemsGrid || !itemCount || !totalReadingTime) return;
      
      if (allItems.length === 0) {
        emptyState?.classList.remove('hidden');
        savedItems?.classList.add('hidden');
        return;
      }
      
      emptyState?.classList.add('hidden');
      savedItems?.classList.remove('hidden');
      
      // Filter and sort
      let displayItems = filterItems(allItems, currentFilter);
      displayItems = sortItems(displayItems, currentSort);
      
      // Render
      itemsGrid.innerHTML = displayItems.map(createItemCard).join('');
      
      // Update stats
      itemCount.textContent = displayItems.length;
      const estimatedTime = displayItems.length * 5; // Assume 5 min per item
      totalReadingTime.textContent = `${estimatedTime} min`;
      
      // Add remove listeners
      document.querySelectorAll('.remove-item-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const id = parseInt(btn.dataset.id);
          if (confirm('Remove this item from your saved list?')) {
            removeItem(id);
          }
        });
      });
    }
    
    // Initialize
    function init() {
      allItems = loadSavedItems();
      renderItems();
      
      // Filter buttons
      filterButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          filterButtons.forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          currentFilter = btn.dataset.type;
          renderItems();
        });
      });
      
      // Sort select
      if (sortSelect) {
        sortSelect.addEventListener('change', () => {
          currentSort = sortSelect.value;
          renderItems();
        });
      }
    }
    
    init();
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .filter-btn {
    padding: 0.25rem 0.75rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: rgb(75 85 99);
    background-color: rgb(243 244 246);
    border-radius: 0.5rem;
    transition: background-color 0.15s ease-in-out;
  }
  
  .filter-btn:hover {
    background-color: rgb(229 231 235);
  }
  
  .filter-btn.active {
    background-color: rgb(37 99 235);
    color: white;
  }
  
  .filter-btn.active:hover {
    background-color: rgb(29 78 216);
  }
  
  /* Grid responsive adjustments */
  @media (max-width: 640px) {
    #items-grid {
      grid-template-columns: 1fr;
    }
    
    .flex.flex-wrap.gap-4.items-center.justify-between {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
  }
</style>
