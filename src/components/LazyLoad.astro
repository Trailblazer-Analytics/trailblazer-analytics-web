---
// LazyLoad component for below-the-fold content
// Uses Intersection Observer API to load content only when it's about to enter the viewport

const { threshold = 0.1, rootMargin = "100px", className = "" } = Astro.props;
---

<div class={`lazy-load ${className}`} data-threshold={threshold} data-root-margin={rootMargin}>
  <div class="lazy-load-placeholder">
    <div class="loading-indicator">
      <div class="spinner"></div>
    </div>
  </div>
  <div class="lazy-load-content hidden">
    <slot />
  </div>
</div>

<style>
  .lazy-load {
    position: relative;
    min-height: 100px;
  }
  
  .lazy-load-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f9f9f9;
    border-radius: 0.5rem;
  }
  
  .lazy-load-content.hidden {
    display: none;
  }
  
  .loading-indicator {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid rgba(0, 143, 85, 0.1);
    border-top-color: var(--color-brand-green);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .lazy-load-placeholder {
      background-color: #1a1a1a;
    }
    
    .spinner {
      border-color: rgba(207, 181, 59, 0.1);
      border-top-color: var(--color-brand-gold);
    }
  }
</style>

<script>
  // Initialize lazy loading for all elements with the lazy-load class
  function initLazyLoad() {
    const lazyLoadElements = document.querySelectorAll('.lazy-load');
    
    if ('IntersectionObserver' in window) {
      lazyLoadElements.forEach(lazyElement => {
        const threshold = parseFloat(lazyElement.dataset.threshold || 0.1);
        const rootMargin = lazyElement.dataset.rootMargin || '100px';
        
        const observer = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const placeholder = lazyElement.querySelector('.lazy-load-placeholder');
                const content = lazyElement.querySelector('.lazy-load-content');
                
                // Show the content
                if (content) {
                  content.classList.remove('hidden');
                }
                
                // Hide the placeholder
                if (placeholder) {
                  placeholder.style.display = 'none';
                }
                
                // Stop observing once loaded
                observer.unobserve(entry.target);
              }
            });
          },
          {
            threshold,
            rootMargin,
          }
        );
        
        observer.observe(lazyElement);
      });
    } else {
      // Fallback for browsers that don't support Intersection Observer
      lazyLoadElements.forEach(lazyElement => {
        const placeholder = lazyElement.querySelector('.lazy-load-placeholder');
        const content = lazyElement.querySelector('.lazy-load-content');
        
        if (content) {
          content.classList.remove('hidden');
        }
        
        if (placeholder) {
          placeholder.style.display = 'none';
        }
      });
    }
  }
  
  // Run on page load
  document.addEventListener('DOMContentLoaded', initLazyLoad);
  
  // Also run when the page is shown if it was previously hidden
  // This handles cases where the page was loaded in a background tab
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      initLazyLoad();
    }
  });
</script>
