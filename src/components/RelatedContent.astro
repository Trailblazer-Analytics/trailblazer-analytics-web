---
// Related content component for blog posts and other content pages
// This component finds and displays related content based on tags/keywords

const { 
  contentType = 'blog',     // Type of content: blog, techNotes, whitepapers, etc.
  currentSlug,              // Current content slug to exclude from related results
  keywords = [],            // Keywords/tags to match
  title = "Related Content", // Section title
  maxItems = 3,             // Maximum number of items to display
  className = ""            // Additional CSS classes
} = Astro.props;

// Import collections as needed
import { getCollection } from 'astro:content';
import OptimizedImage from './OptimizedImage.astro';

// Get all content of the specified type
let allContent = [];
try {
  allContent = await getCollection(contentType);
} catch (error) {
  console.error(`Error loading content collection "${contentType}":`, error);
}

// Filter out the current content item
const otherContent = allContent.filter(item => item.slug !== currentSlug);

// Score each content item based on matching keywords
const scoredContent = otherContent.map(item => {
  const itemKeywords = item.data.keywords || [];
  let score = 0;
  
  // Calculate score based on keyword matches
  keywords.forEach(keyword => {
    if (itemKeywords.includes(keyword)) {
      score += 1;
    }
  });
  
  // Also check title and description for partial matches
  keywords.forEach(keyword => {
    const keywordLower = keyword.toLowerCase();
    if (item.data.title.toLowerCase().includes(keywordLower)) {
      score += 0.5;
    }
    if (item.data.description && item.data.description.toLowerCase().includes(keywordLower)) {
      score += 0.3;
    }
  });
  
  return { item, score };
});

// Sort by score (highest first) and take the top N items
const relatedContent = scoredContent
  .filter(item => item.score > 0)  // Only include items with at least some relevance
  .sort((a, b) => b.score - a.score)
  .slice(0, maxItems);

// Format date for display
function formatDate(date) {
  if (!date) return '';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

// If we don't have enough related content by keywords, add recent content
let displayContent = [...relatedContent];
if (displayContent.length < maxItems) {
  const recentContent = otherContent
    .filter(item => !displayContent.some(rc => rc.item.slug === item.slug))
    .sort((a, b) => {
      const dateA = a.data.date ? new Date(a.data.date) : new Date(0);
      const dateB = b.data.date ? new Date(b.data.date) : new Date(0);
      return dateB - dateA;
    })
    .slice(0, maxItems - displayContent.length)
    .map(item => ({ item, score: 0 }));
  
  displayContent = [...displayContent, ...recentContent];
}
---

{displayContent.length > 0 && (
  <div class={`related-content ${className}`}>
    <h2 class="text-2xl font-bold mb-6">{title}</h2>
    
    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {displayContent.map(({ item }) => (
        <a href={`/${contentType}/${item.slug}`} class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
          {item.data.image && (
            <div class="relative h-40 w-full overflow-hidden">
              <OptimizedImage
                src={item.data.image}
                alt={item.data.title}
                width={400}
                height={225}
                className="object-cover w-full h-full"
              />
            </div>
          )}
          
          <div class="p-4">
            <div class="flex justify-between items-center mb-2">
              <span class="text-xs text-brandGreen dark:text-brandGold uppercase tracking-wider font-semibold">
                {contentType === 'blog' ? 'Article' : 
                 contentType === 'techNotes' ? 'Tech Note' :
                 contentType === 'whitepapers' ? 'White Paper' :
                 contentType === 'caseStudies' ? 'Case Study' : 'Resource'}
              </span>
              {item.data.date && (
                <span class="text-xs text-gray-500 dark:text-gray-400">{formatDate(item.data.date)}</span>
              )}
            </div>
            
            <h3 class="font-bold text-lg mb-2 line-clamp-2">{item.data.title}</h3>
            
            {item.data.description && (
              <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-2 mb-3">{item.data.description}</p>
            )}
            
            <span class="text-brandGreen dark:text-brandGold inline-flex items-center text-sm font-medium">
              Read more
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
              </svg>
            </span>
          </div>
        </a>
      ))}
    </div>
  </div>
)}

{displayContent.length === 0 && Astro.slots.has('fallback') && (
  <div class={className}>
    <slot name="fallback" />
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
