---
// Related content component for blog posts and other content pages
// This component finds and displays related content based on tags/keywords

const { 
  contentType = 'blog',
  currentSlug,
  keywords = [],
  title = "Related Content",
  maxItems = 3,
  className = ""
} = Astro.props;

import { getCollection } from 'astro:content';
import OptimizedImage from './OptimizedImage.astro';
import type { ImageMetadata } from 'astro'; // Or from 'astro:assets' if preferred
import { formatDate } from '../utils/date'; // Import the centralized formatDate function

// 1. Glob all potential local content images
// Adjust the path according to your project structure, e.g., /src/assets/images/content/
const localContentImages = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/content/**/*.{jpeg,jpg,png,gif,webp,svg,avif}');

// Get all content of the specified type
let allContent = [];
try {
  allContent = await getCollection(contentType);
} catch (error) {
  console.error(`Error loading content collection "${contentType}":`, error);
}

// Filter out the current content item
const otherContent = allContent.filter(item => item.slug !== currentSlug);

// Score each content item based on matching keywords
const scoredContent = otherContent.map(item => {
  const itemKeywords = item.data.tags || item.data.keywords || []; // Use tags or keywords
  let score = 0;
  
  keywords.forEach(keyword => {
    if (itemKeywords.includes(keyword)) {
      score += 1;
    }
  });
  
  keywords.forEach(keyword => {
    const keywordLower = keyword.toLowerCase();
    if (item.data.title.toLowerCase().includes(keywordLower)) {
      score += 0.5;
    }
    if (item.data.description && item.data.description.toLowerCase().includes(keywordLower)) {
      score += 0.3;
    }
  });
  
  return { item, score };
});

// Sort by score (highest first) and take the top N items
const relatedByScore = scoredContent
  .filter(item => item.score > 0)
  .sort((a, b) => b.score - a.score);

// If we don't have enough related content by keywords, add recent content
let tempDisplayContent = [...relatedByScore];

if (tempDisplayContent.length < maxItems) {
  const recentContent = otherContent
    .filter(item => !tempDisplayContent.some(rc => rc.item.slug === item.slug)) // Exclude already selected
    .sort((a, b) => {
      const dateA = a.data.date ? new Date(a.data.date) : new Date(0);
      const dateB = b.data.date ? new Date(b.data.date) : new Date(0);
      return dateB.getTime() - dateA.getTime();
    })
    .slice(0, maxItems - tempDisplayContent.length)
    .map(item => ({ item, score: 0 })); // Add score 0 for recent items  
    
  tempDisplayContent = [...tempDisplayContent, ...recentContent];
}

// Limit to maxItems after combining
const finalContentList = tempDisplayContent.slice(0, maxItems);

// Prepare display content with resolved image metadata
const displayContent = await Promise.all(finalContentList.map(async ({ item, score }) => {
  let imageSrc: ImageMetadata | string | undefined = item.data.image; // Default to the string path

  if (item.data.image && !item.data.image.startsWith('/') && !item.data.image.startsWith('http')) {
    // Assumed to be a local image filename in /src/assets/images/content/
    const globKey = `/src/assets/images/content/${item.data.image}`;
    if (localContentImages[globKey]) {
      try {
        const imageModule = await localContentImages[globKey]();
        imageSrc = imageModule.default;
      } catch (e) {
        console.error(`Failed to load image module for ${globKey}:`, e);
        // Keep imageSrc as the string path, OptimizedImage will handle it as a public/remote path
      }
    } else {
      // console.warn(`Local image ${item.data.image} not found in glob /src/assets/images/content/`);
      // If not found in glob, treat as a public path (OptimizedImage will prepend base if needed)
      // Or, you might want to force it to be a public path if that's your convention for non-globbed local images
      // For now, we let OptimizedImage handle it based on its string content.
    }
  }
  return { item, score, imageSrc };
}));


---

{displayContent.length > 0 && (
  <div class={`related-content ${className}`}>
    <h2 class="text-2xl font-bold mb-6">{title}</h2>
    
    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {displayContent.map(({ item, imageSrc }) => (
        <a href={`/${contentType}/${item.slug}`} class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
          {imageSrc && ( // Use the resolved imageSrc
            <div class="relative h-40 w-full overflow-hidden">              <OptimizedImage
                src={imageSrc}
                alt={item.data.title}
                width={400}
                height={225}
                class="object-cover w-full h-full"
                format="webp"
                loading="lazy"
                placeholder={true}
                sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
              />
            </div>
          )}
          
          <div class="p-4">
            <div class="flex justify-between items-center mb-2">
              <span class="text-xs text-brandGreen dark:text-brandGold uppercase tracking-wider font-semibold">
                {contentType === 'blog' ? 'Article' : 
                 contentType === 'techNotes' ? 'Tech Note' :
                 contentType === 'whitepapers' ? 'White Paper' :
                 contentType === 'caseStudies' ? 'Case Study' : 'Resource'}
              </span>
              {item.data.date && (
                <span class="text-xs text-gray-500 dark:text-gray-400">{formatDate(item.data.date)}</span>
              )}
            </div>
            
            <h3 class="font-bold text-lg mb-2 line-clamp-2">{item.data.title}</h3>
            
            {item.data.description && (
              <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-2 mb-3">{item.data.description}</p>
            )}
            
            <span class="text-brandGreen dark:text-brandGold inline-flex items-center text-sm font-medium">
              Read more
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
              </svg>
            </span>
          </div>
        </a>
      ))}
    </div>
  </div>
)}

{displayContent.length === 0 && Astro.slots.has('fallback') && (
  <div class={className}>
    <slot name="fallback" />
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
