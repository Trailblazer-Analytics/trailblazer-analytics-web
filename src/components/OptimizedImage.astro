---
// OptimizedImage.astro - A responsive image component using astro:assets
import { Image } from 'astro:assets';

// Props definition with defaults
export interface Props {
  src: ImageMetadata | string; // ImageMetadata for local images, string for remote or public/
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  // sizes?: string; // astro:assets <Image> handles sizes automatically based on widths or a densities prop
  loading?: "lazy" | "eager";
  decoding?: "async" | "sync" | "auto";
  format?: "webp" | "avif" | "jpeg" | "png" | "svg" | "gif"; // Supported formats by astro:assets
  quality?: number | "low" | "mid" | "high" | "max";
  aspectRatio?: string | number; // e.g., "16:9" or 1.77
  densities?: number[];
  widths?: number[];
}

const {
  src,
  alt,
  width,
  height,
  class: className = "",
  loading = "lazy",
  decoding = "async",
  format,
  quality,
  aspectRatio,
  densities,
  widths
} = Astro.props;

const base = import.meta.env.BASE_URL;

// Determine if src is a string (remote or public path) or ImageMetadata (local import)
let imageProps: any = {
  src,
  alt,
  loading,
  decoding,
  class: className,
};

if (typeof src === 'string') {
  // Handle public or remote images - astro:assets <Image> doesn't optimize these directly
  // but we can still use it as a regular <img> tag wrapper with benefits like loading/decoding.
  // For public images, ensure the path is correct.
  imageProps.src = src.startsWith('http') || src.startsWith('/') ? src : `${base}${src}`;
  if (width) imageProps.width = width;
  if (height) imageProps.height = height;
  // astro:assets specific props like format, quality, widths, densities are not applicable here
} else {
  // Local images (ImageMetadata)
  if (width) imageProps.width = width;
  if (height) imageProps.height = height;
  if (format) imageProps.format = format;
  if (quality) imageProps.quality = quality;
  if (aspectRatio) imageProps.aspectRatio = aspectRatio;
  if (densities) imageProps.densities = densities;
  if (widths) imageProps.widths = widths;
}
---

{typeof src === 'string' ? (
  <img {...imageProps} />
) : (
  <Image {...imageProps} />
)}
