---
---

<div class="relative">
  <!-- Search Button for Desktop -->
  <button id="search-button" class="hover:text-brandGold transition-colors flex items-center">
    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
    <span class="hidden sm:inline">Search</span>
  </button>
    <!-- Search Modal - Must remain hidden by default -->
  <div id="search-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 items-start justify-center pt-20 px-4 hidden" style="display: none !important; visibility: hidden !important;" data-state="closed">
    <div class="bg-white dark:bg-gray-900 rounded-lg shadow-xl w-full max-w-2xl">
      <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Search Trailblazer Analytics</h3>
        <button id="close-search-modal" class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div class="p-4">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <input
            type="text"
            id="search-input"
            class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md leading-5 bg-white dark:bg-gray-800 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 dark:focus:placeholder-gray-500 focus:ring-2 focus:ring-brandGreen dark:focus:ring-brandGold focus:border-transparent"
            placeholder="Search posts, guides, and more..."
            aria-label="Search"
          />
        </div>
        
        <div id="search-results" class="mt-4 max-h-[50vh] overflow-y-auto">
          <!-- Results will be dynamically populated here -->
          <div id="search-status" class="text-center py-4 text-gray-500 dark:text-gray-400">
            Type at least 2 characters to search
          </div>
          <div id="results-container" class="divide-y divide-gray-200 dark:divide-gray-700 hidden"></div>
        </div>
      </div>
      
      <div class="px-4 py-3 bg-gray-50 dark:bg-gray-800 rounded-b-lg text-xs text-gray-500 dark:text-gray-400 text-center">
        Press <kbd class="px-1.5 py-0.5 text-xs bg-gray-200 dark:bg-gray-700 rounded">ESC</kbd> to close or <kbd class="px-1.5 py-0.5 text-xs bg-gray-200 dark:bg-gray-700 rounded">â†µ Enter</kbd> to go to the first result
      </div>
    </div>
  </div>
</div>

<script>
  // Force hide search modal on page load
  document.addEventListener('DOMContentLoaded', forceHideSearchModal);
  window.addEventListener('load', forceHideSearchModal);
  
  function forceHideSearchModal() {
    const modal = document.getElementById('search-modal');
    if (modal) {
      modal.classList.add('hidden');
      modal.style.display = 'none';
    }
  }
  
  // Call it immediately as well
  forceHideSearchModal();
  
  // DOM elements
  const searchButton = document.getElementById('search-button');
  const searchModal = document.getElementById('search-modal');
  const closeModalButton = document.getElementById('close-search-modal');
  const searchInput = document.getElementById('search-input');
  const searchStatus = document.getElementById('search-status');
  const resultsContainer = document.getElementById('results-container');
  const base = import.meta.env.BASE_URL || '';
  
  // Search state
  let searchTimeout = null;
  let currentSearchQuery = '';
  let lastResults = [];
    // Ensure search modal is hidden initially
  searchModal.classList.add('hidden');
  searchModal.style.display = 'none';
  
  // Open search modal
  if (searchButton && searchModal) {
    searchButton.addEventListener('click', (e) => {
      e.preventDefault();
      if (!searchModal) return;
      
      searchModal.classList.remove('hidden');
      searchModal.style.display = 'flex';
      document.body.classList.add('overflow-hidden');
      
      setTimeout(() => {
        if (searchInput) searchInput.focus();
      }, 100);
    });
  }
  
  // Close search modal
  function closeSearchModal() {
    if (!searchModal) return;
    
    searchModal.classList.add('hidden');
    searchModal.style.display = 'none';
    document.body.classList.remove('overflow-hidden');
    
    if (searchInput) searchInput.value = '';
    clearResults();
    
    // Extra safety - add a timeout to ensure it's really hidden
    setTimeout(() => {
      if (searchModal) {
        searchModal.classList.add('hidden');
        searchModal.style.display = 'none';
      }
    }, 100);
  }
  
  // Make sure close button works properly
  if (closeModalButton) {
    closeModalButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      closeSearchModal();
    });
  }
  
  // Close on ESC key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !searchModal.classList.contains('hidden')) {
      closeSearchModal();
    }
    
    // Go to first result on Enter
    if (e.key === 'Enter' && !searchModal.classList.contains('hidden') && lastResults.length > 0) {
      window.location.href = base + lastResults[0].slug;
    }
  });
  
  // Close when clicking outside the modal
  searchModal.addEventListener('click', (e) => {
    if (e.target === searchModal) {
      closeSearchModal();
    }
  });
  
  // Clear results
  function clearResults() {
    searchStatus.textContent = 'Type at least 2 characters to search';
    searchStatus.classList.remove('hidden');
    resultsContainer.classList.add('hidden');
    resultsContainer.innerHTML = '';
    lastResults = [];
  }
  
  // Debounced search
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    currentSearchQuery = query;
    
    // Clear previous timeout
    if (searchTimeout) {
      clearTimeout(searchTimeout);
    }
    
    // Clear results if query is too short
    if (query.length < 2) {
      clearResults();
      return;
    }
    
    // Set loading state
    searchStatus.textContent = 'Searching...';
    searchStatus.classList.remove('hidden');
    resultsContainer.classList.add('hidden');
    
    // Debounce search request
    searchTimeout = setTimeout(() => {
      // Only search if the query hasn't changed (prevents race conditions)
      if (currentSearchQuery === query) {
        performSearch(query);
      }
    }, 300);
  });
  
  // Perform search request
  async function performSearch(query) {
    try {
      const response = await fetch(`${base}/api/search?q=${encodeURIComponent(query)}`);
      
      if (!response.ok) {
        throw new Error('Search request failed');
      }
      
      const data = await response.json();
      
      // Save results for Enter key navigation
      lastResults = data.results;
      
      // Display results
      if (data.results.length === 0) {
        searchStatus.textContent = 'No results found';
        searchStatus.classList.remove('hidden');
        resultsContainer.classList.add('hidden');
      } else {
        searchStatus.classList.add('hidden');
        resultsContainer.classList.remove('hidden');
        
        // Clear previous results
        resultsContainer.innerHTML = '';
        
        // Add new results
        data.results.forEach(result => {
          const resultItem = document.createElement('a');
          resultItem.href = base + result.slug;
          resultItem.className = 'block p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors';
          
          // Format date if available
          let dateDisplay = '';
          if (result.date) {
            const date = new Date(result.date);
            dateDisplay = date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
          }
          
          resultItem.innerHTML = `
            <div class="flex items-start">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 mr-2">
                ${result.type}
              </span>
              ${dateDisplay ? `<span class="text-xs text-gray-500 dark:text-gray-400">${dateDisplay}</span>` : ''}
            </div>
            <h4 class="text-lg font-medium text-gray-900 dark:text-white mt-1">${result.title}</h4>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">${result.description}</p>
          `;
          
          resultsContainer.appendChild(resultItem);
        });
      }
    } catch (error) {
      console.error('Search error:', error);
      searchStatus.textContent = 'An error occurred while searching';
      searchStatus.classList.remove('hidden');
      resultsContainer.classList.add('hidden');
    }
  }
</script>
