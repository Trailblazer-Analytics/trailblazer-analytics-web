name: 🚀 Deploy to GitHub Pages | Trailblazer Analytics

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  # HOOK: Add schedule for automated rebuilds (e.g., for time-sensitive content)
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC - customize this timing

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # HOOK: Pre-build checks and validation
  validate:
    name: 🔍 Validate Content & Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      # HOOK: Generate cache keys for better build performance
      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
          
      # HOOK: Content validation (check for broken links, invalid frontmatter, etc.)
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Validate content structure
        run: |
          echo "🔍 Validating blog posts..."
          # HOOK: Add your custom validation scripts here
          node -e "
            const fs = require('fs');
            const path = require('path');
            const blogDir = 'src/content/blog';
            if (fs.existsSync(blogDir)) {
              const posts = fs.readdirSync(blogDir).filter(f => f.endsWith('.md'));
              console.log(\`✅ Found \${posts.length} blog posts\`);
              posts.forEach(post => console.log(\`  - \${post}\`));
            } else {
              console.log('⚠️ Blog directory not found');
            }
          "
          
      # HOOK: Lint markdown files for consistency
      - name: Lint content
        run: |
          echo "📝 Linting markdown files..."
          # HOOK: Add markdownlint or similar tools here
          if [ -f ".markdownlint.json" ]; then
            echo "✅ Markdownlint config found"
          else
            echo "⚠️ No markdownlint config - consider adding one"
          fi
          
  build:
    name: 🏗️ Build Site
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      # HOOK: Enhanced dependency installation with timing
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          time pnpm install --no-frozen-lockfile
          echo "✅ Dependencies installed successfully"
          
      # HOOK: Pre-build hooks for custom processing
      - name: Pre-build processing
        run: |
          echo "⚡ Running pre-build tasks..."
          # HOOK: Add any custom pre-build scripts here
          # Examples: image optimization, RSS generation, sitemap creation
          if [ -f "scripts/pre-build.js" ]; then
            node scripts/pre-build.js
          fi
          echo "✅ Pre-build tasks completed"
          
      # HOOK: Build with enhanced error handling and timing
      - name: Build site
        run: |
          echo "🏗️ Building Trailblazer Analytics..."
          start_time=$(date +%s)
          
          # Build the site
          pnpm run build
          
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "✅ Build completed in ${build_time} seconds"
          
          # HOOK: Post-build validation
          if [ -d "dist" ]; then
            pages_count=$(find dist -name "*.html" | wc -l)
            echo "📊 Generated ${pages_count} HTML pages"
            
            # Check for critical files
            if [ -f "dist/index.html" ]; then
              echo "✅ Homepage generated successfully"
            else
              echo "❌ Homepage missing!"
              exit 1
            fi
            
            if [ -f "dist/rss.xml" ]; then
              echo "✅ RSS feed generated successfully"
            else
              echo "⚠️ RSS feed missing - check RSS implementation"
            fi
          else
            echo "❌ Build directory missing!"
            exit 1
          fi
          
      # HOOK: Performance and SEO checks
      - name: Quality checks
        run: |
          echo "🔍 Running quality checks..."
          
          # Check for common issues
          if grep -r "TODO\|FIXME\|HACK" dist/ --include="*.html" > /dev/null; then
            echo "⚠️ Found TODO/FIXME/HACK comments in built files"
            grep -r "TODO\|FIXME\|HACK" dist/ --include="*.html" | head -5
          else
            echo "✅ No development comments found in production build"
          fi
          
          # HOOK: Add your custom quality checks here
          # Examples: accessibility checks, performance audits, broken link detection
          
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          
  deploy:
    name: 🚀 Deploy to Production
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      # HOOK: Post-deployment verification
      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 30  # Wait for deployment to propagate
          
          # HOOK: Add health checks for your deployed site
          # Example: curl checks, lighthouse audits, etc.
          echo "✅ Deployment verification completed"
          echo "🌐 Site deployed to: ${{ steps.deployment.outputs.page_url }}"
          
  # HOOK: Optional notification job
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() # Run even if previous jobs fail
    steps:
      - name: Send deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment successful!"
            echo "🌐 Live at: https://anykolaiszyn.github.io/trailblazer-analytics-devkit/"
            # HOOK: Add Slack, Discord, or email notifications here
          else
            echo "❌ Deployment failed!"
            echo "📋 Check the logs for details"
            # HOOK: Add failure notifications here
          fi
